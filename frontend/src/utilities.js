import { exp, math, mod } from "@tensorflow/tfjs";

export const TRIANGULATION = [
    127,
    34,
    139,
    11,
    0,
    37,
    232,
    231,
    120,
    72,
    37,
    39,
    128,
    121,
    47,
    232,
    121,
    128,
    104,
    69,
    67,
    175,
    171,
    148,
    157,
    154,
    155,
    118,
    50,
    101,
    73,
    39,
    40,
    9,
    151,
    108,
    48,
    115,
    131,
    194,
    204,
    211,
    74,
    40,
    185,
    80,
    42,
    183,
    40,
    92,
    186,
    230,
    229,
    118,
    202,
    212,
    214,
    83,
    18,
    17,
    76,
    61,
    146,
    160,
    29,
    30,
    56,
    157,
    173,
    106,
    204,
    194,
    135,
    214,
    192,
    203,
    165,
    98,
    21,
    71,
    68,
    51,
    45,
    4,
    144,
    24,
    23,
    77,
    146,
    91,
    205,
    50,
    187,
    201,
    200,
    18,
    91,
    106,
    182,
    90,
    91,
    181,
    85,
    84,
    17,
    206,
    203,
    36,
    148,
    171,
    140,
    92,
    40,
    39,
    193,
    189,
    244,
    159,
    158,
    28,
    247,
    246,
    161,
    236,
    3,
    196,
    54,
    68,
    104,
    193,
    168,
    8,
    117,
    228,
    31,
    189,
    193,
    55,
    98,
    97,
    99,
    126,
    47,
    100,
    166,
    79,
    218,
    155,
    154,
    26,
    209,
    49,
    131,
    135,
    136,
    150,
    47,
    126,
    217,
    223,
    52,
    53,
    45,
    51,
    134,
    211,
    170,
    140,
    67,
    69,
    108,
    43,
    106,
    91,
    230,
    119,
    120,
    226,
    130,
    247,
    63,
    53,
    52,
    238,
    20,
    242,
    46,
    70,
    156,
    78,
    62,
    96,
    46,
    53,
    63,
    143,
    34,
    227,
    173,
    155,
    133,
    123,
    117,
    111,
    44,
    125,
    19,
    236,
    134,
    51,
    216,
    206,
    205,
    154,
    153,
    22,
    39,
    37,
    167,
    200,
    201,
    208,
    36,
    142,
    100,
    57,
    212,
    202,
    20,
    60,
    99,
    28,
    158,
    157,
    35,
    226,
    113,
    160,
    159,
    27,
    204,
    202,
    210,
    113,
    225,
    46,
    43,
    202,
    204,
    62,
    76,
    77,
    137,
    123,
    116,
    41,
    38,
    72,
    203,
    129,
    142,
    64,
    98,
    240,
    49,
    102,
    64,
    41,
    73,
    74,
    212,
    216,
    207,
    42,
    74,
    184,
    169,
    170,
    211,
    170,
    149,
    176,
    105,
    66,
    69,
    122,
    6,
    168,
    123,
    147,
    187,
    96,
    77,
    90,
    65,
    55,
    107,
    89,
    90,
    180,
    101,
    100,
    120,
    63,
    105,
    104,
    93,
    137,
    227,
    15,
    86,
    85,
    129,
    102,
    49,
    14,
    87,
    86,
    55,
    8,
    9,
    100,
    47,
    121,
    145,
    23,
    22,
    88,
    89,
    179,
    6,
    122,
    196,
    88,
    95,
    96,
    138,
    172,
    136,
    215,
    58,
    172,
    115,
    48,
    219,
    42,
    80,
    81,
    195,
    3,
    51,
    43,
    146,
    61,
    171,
    175,
    199,
    81,
    82,
    38,
    53,
    46,
    225,
    144,
    163,
    110,
    246,
    33,
    7,
    52,
    65,
    66,
    229,
    228,
    117,
    34,
    127,
    234,
    107,
    108,
    69,
    109,
    108,
    151,
    48,
    64,
    235,
    62,
    78,
    191,
    129,
    209,
    126,
    111,
    35,
    143,
    163,
    161,
    246,
    117,
    123,
    50,
    222,
    65,
    52,
    19,
    125,
    141,
    221,
    55,
    65,
    3,
    195,
    197,
    25,
    7,
    33,
    220,
    237,
    44,
    70,
    71,
    139,
    122,
    193,
    245,
    247,
    130,
    33,
    71,
    21,
    162,
    153,
    158,
    159,
    170,
    169,
    150,
    188,
    174,
    196,
    216,
    186,
    92,
    144,
    160,
    161,
    2,
    97,
    167,
    141,
    125,
    241,
    164,
    167,
    37,
    72,
    38,
    12,
    145,
    159,
    160,
    38,
    82,
    13,
    63,
    68,
    71,
    226,
    35,
    111,
    158,
    153,
    154,
    101,
    50,
    205,
    206,
    92,
    165,
    209,
    198,
    217,
    165,
    167,
    97,
    220,
    115,
    218,
    133,
    112,
    243,
    239,
    238,
    241,
    214,
    135,
    169,
    190,
    173,
    133,
    171,
    208,
    32,
    125,
    44,
    237,
    86,
    87,
    178,
    85,
    86,
    179,
    84,
    85,
    180,
    83,
    84,
    181,
    201,
    83,
    182,
    137,
    93,
    132,
    76,
    62,
    183,
    61,
    76,
    184,
    57,
    61,
    185,
    212,
    57,
    186,
    214,
    207,
    187,
    34,
    143,
    156,
    79,
    239,
    237,
    123,
    137,
    177,
    44,
    1,
    4,
    201,
    194,
    32,
    64,
    102,
    129,
    213,
    215,
    138,
    59,
    166,
    219,
    242,
    99,
    97,
    2,
    94,
    141,
    75,
    59,
    235,
    24,
    110,
    228,
    25,
    130,
    226,
    23,
    24,
    229,
    22,
    23,
    230,
    26,
    22,
    231,
    112,
    26,
    232,
    189,
    190,
    243,
    221,
    56,
    190,
    28,
    56,
    221,
    27,
    28,
    222,
    29,
    27,
    223,
    30,
    29,
    224,
    247,
    30,
    225,
    238,
    79,
    20,
    166,
    59,
    75,
    60,
    75,
    240,
    147,
    177,
    215,
    20,
    79,
    166,
    187,
    147,
    213,
    112,
    233,
    244,
    233,
    128,
    245,
    128,
    114,
    188,
    114,
    217,
    174,
    131,
    115,
    220,
    217,
    198,
    236,
    198,
    131,
    134,
    177,
    132,
    58,
    143,
    35,
    124,
    110,
    163,
    7,
    228,
    110,
    25,
    356,
    389,
    368,
    11,
    302,
    267,
    452,
    350,
    349,
    302,
    303,
    269,
    357,
    343,
    277,
    452,
    453,
    357,
    333,
    332,
    297,
    175,
    152,
    377,
    384,
    398,
    382,
    347,
    348,
    330,
    303,
    304,
    270,
    9,
    336,
    337,
    278,
    279,
    360,
    418,
    262,
    431,
    304,
    408,
    409,
    310,
    415,
    407,
    270,
    409,
    410,
    450,
    348,
    347,
    422,
    430,
    434,
    313,
    314,
    17,
    306,
    307,
    375,
    387,
    388,
    260,
    286,
    414,
    398,
    335,
    406,
    418,
    364,
    367,
    416,
    423,
    358,
    327,
    251,
    284,
    298,
    281,
    5,
    4,
    373,
    374,
    253,
    307,
    320,
    321,
    425,
    427,
    411,
    421,
    313,
    18,
    321,
    405,
    406,
    320,
    404,
    405,
    315,
    16,
    17,
    426,
    425,
    266,
    377,
    400,
    369,
    322,
    391,
    269,
    417,
    465,
    464,
    386,
    257,
    258,
    466,
    260,
    388,
    456,
    399,
    419,
    284,
    332,
    333,
    417,
    285,
    8,
    346,
    340,
    261,
    413,
    441,
    285,
    327,
    460,
    328,
    355,
    371,
    329,
    392,
    439,
    438,
    382,
    341,
    256,
    429,
    420,
    360,
    364,
    394,
    379,
    277,
    343,
    437,
    443,
    444,
    283,
    275,
    440,
    363,
    431,
    262,
    369,
    297,
    338,
    337,
    273,
    375,
    321,
    450,
    451,
    349,
    446,
    342,
    467,
    293,
    334,
    282,
    458,
    461,
    462,
    276,
    353,
    383,
    308,
    324,
    325,
    276,
    300,
    293,
    372,
    345,
    447,
    382,
    398,
    362,
    352,
    345,
    340,
    274,
    1,
    19,
    456,
    248,
    281,
    436,
    427,
    425,
    381,
    256,
    252,
    269,
    391,
    393,
    200,
    199,
    428,
    266,
    330,
    329,
    287,
    273,
    422,
    250,
    462,
    328,
    258,
    286,
    384,
    265,
    353,
    342,
    387,
    259,
    257,
    424,
    431,
    430,
    342,
    353,
    276,
    273,
    335,
    424,
    292,
    325,
    307,
    366,
    447,
    345,
    271,
    303,
    302,
    423,
    266,
    371,
    294,
    455,
    460,
    279,
    278,
    294,
    271,
    272,
    304,
    432,
    434,
    427,
    272,
    407,
    408,
    394,
    430,
    431,
    395,
    369,
    400,
    334,
    333,
    299,
    351,
    417,
    168,
    352,
    280,
    411,
    325,
    319,
    320,
    295,
    296,
    336,
    319,
    403,
    404,
    330,
    348,
    349,
    293,
    298,
    333,
    323,
    454,
    447,
    15,
    16,
    315,
    358,
    429,
    279,
    14,
    15,
    316,
    285,
    336,
    9,
    329,
    349,
    350,
    374,
    380,
    252,
    318,
    402,
    403,
    6,
    197,
    419,
    318,
    319,
    325,
    367,
    364,
    365,
    435,
    367,
    397,
    344,
    438,
    439,
    272,
    271,
    311,
    195,
    5,
    281,
    273,
    287,
    291,
    396,
    428,
    199,
    311,
    271,
    268,
    283,
    444,
    445,
    373,
    254,
    339,
    263,
    466,
    249,
    282,
    334,
    296,
    449,
    347,
    346,
    264,
    447,
    454,
    336,
    296,
    299,
    338,
    10,
    151,
    278,
    439,
    455,
    292,
    407,
    415,
    358,
    371,
    355,
    340,
    345,
    372,
    390,
    249,
    466,
    346,
    347,
    280,
    442,
    443,
    282,
    19,
    94,
    370,
    441,
    442,
    295,
    248,
    419,
    197,
    263,
    255,
    359,
    440,
    275,
    274,
    300,
    383,
    368,
    351,
    412,
    465,
    263,
    467,
    466,
    301,
    368,
    389,
    380,
    374,
    386,
    395,
    378,
    379,
    412,
    351,
    419,
    436,
    426,
    322,
    373,
    390,
    388,
    2,
    164,
    393,
    370,
    462,
    461,
    164,
    0,
    267,
    302,
    11,
    12,
    374,
    373,
    387,
    268,
    12,
    13,
    293,
    300,
    301,
    446,
    261,
    340,
    385,
    384,
    381,
    330,
    266,
    425,
    426,
    423,
    391,
    429,
    355,
    437,
    391,
    327,
    326,
    440,
    457,
    438,
    341,
    382,
    362,
    459,
    457,
    461,
    434,
    430,
    394,
    414,
    463,
    362,
    396,
    369,
    262,
    354,
    461,
    457,
    316,
    403,
    402,
    315,
    404,
    403,
    314,
    405,
    404,
    313,
    406,
    405,
    421,
    418,
    406,
    366,
    401,
    361,
    306,
    408,
    407,
    291,
    409,
    408,
    287,
    410,
    409,
    432,
    436,
    410,
    434,
    416,
    411,
    264,
    368,
    383,
    309,
    438,
    457,
    352,
    376,
    401,
    274,
    275,
    4,
    421,
    428,
    262,
    294,
    327,
    358,
    433,
    416,
    367,
    289,
    455,
    439,
    462,
    370,
    326,
    2,
    326,
    370,
    305,
    460,
    455,
    254,
    449,
    448,
    255,
    261,
    446,
    253,
    450,
    449,
    252,
    451,
    450,
    256,
    452,
    451,
    341,
    453,
    452,
    413,
    464,
    463,
    441,
    413,
    414,
    258,
    442,
    441,
    257,
    443,
    442,
    259,
    444,
    443,
    260,
    445,
    444,
    467,
    342,
    445,
    459,
    458,
    250,
    289,
    392,
    290,
    290,
    328,
    460,
    376,
    433,
    435,
    250,
    290,
    392,
    411,
    416,
    433,
    341,
    463,
    464,
    453,
    464,
    465,
    357,
    465,
    412,
    343,
    412,
    399,
    360,
    363,
    440,
    437,
    399,
    456,
    420,
    456,
    363,
    401,
    435,
    288,
    372,
    383,
    353,
    339,
    255,
    249,
    448,
    261,
    255,
    133,
    243,
    190,
    133,
    155,
    112,
    33,
    246,
    247,
    33,
    130,
    25,
    398,
    384,
    286,
    362,
    398,
    414,
    362,
    463,
    341,
    263,
    359,
    467,
    263,
    249,
    255,
    466,
    467,
    260,
    75,
    60,
    166,
    238,
    239,
    79,
    162,
    127,
    139,
    72,
    11,
    37,
    121,
    232,
    120,
    73,
    72,
    39,
    114,
    128,
    47,
    233,
    232,
    128,
    103,
    104,
    67,
    152,
    175,
    148,
    173,
    157,
    155,
    119,
    118,
    101,
    74,
    73,
    40,
    107,
    9,
    108,
    49,
    48,
    131,
    32,
    194,
    211,
    184,
    74,
    185,
    191,
    80,
    183,
    185,
    40,
    186,
    119,
    230,
    118,
    210,
    202,
    214,
    84,
    83,
    17,
    77,
    76,
    146,
    161,
    160,
    30,
    190,
    56,
    173,
    182,
    106,
    194,
    138,
    135,
    192,
    129,
    203,
    98,
    54,
    21,
    68,
    5,
    51,
    4,
    145,
    144,
    23,
    90,
    77,
    91,
    207,
    205,
    187,
    83,
    201,
    18,
    181,
    91,
    182,
    180,
    90,
    181,
    16,
    85,
    17,
    205,
    206,
    36,
    176,
    148,
    140,
    165,
    92,
    39,
    245,
    193,
    244,
    27,
    159,
    28,
    30,
    247,
    161,
    174,
    236,
    196,
    103,
    54,
    104,
    55,
    193,
    8,
    111,
    117,
    31,
    221,
    189,
    55,
    240,
    98,
    99,
    142,
    126,
    100,
    219,
    166,
    218,
    112,
    155,
    26,
    198,
    209,
    131,
    169,
    135,
    150,
    114,
    47,
    217,
    224,
    223,
    53,
    220,
    45,
    134,
    32,
    211,
    140,
    109,
    67,
    108,
    146,
    43,
    91,
    231,
    230,
    120,
    113,
    226,
    247,
    105,
    63,
    52,
    241,
    238,
    242,
    124,
    46,
    156,
    95,
    78,
    96,
    70,
    46,
    63,
    116,
    143,
    227,
    116,
    123,
    111,
    1,
    44,
    19,
    3,
    236,
    51,
    207,
    216,
    205,
    26,
    154,
    22,
    165,
    39,
    167,
    199,
    200,
    208,
    101,
    36,
    100,
    43,
    57,
    202,
    242,
    20,
    99,
    56,
    28,
    157,
    124,
    35,
    113,
    29,
    160,
    27,
    211,
    204,
    210,
    124,
    113,
    46,
    106,
    43,
    204,
    96,
    62,
    77,
    227,
    137,
    116,
    73,
    41,
    72,
    36,
    203,
    142,
    235,
    64,
    240,
    48,
    49,
    64,
    42,
    41,
    74,
    214,
    212,
    207,
    183,
    42,
    184,
    210,
    169,
    211,
    140,
    170,
    176,
    104,
    105,
    69,
    193,
    122,
    168,
    50,
    123,
    187,
    89,
    96,
    90,
    66,
    65,
    107,
    179,
    89,
    180,
    119,
    101,
    120,
    68,
    63,
    104,
    234,
    93,
    227,
    16,
    15,
    85,
    209,
    129,
    49,
    15,
    14,
    86,
    107,
    55,
    9,
    120,
    100,
    121,
    153,
    145,
    22,
    178,
    88,
    179,
    197,
    6,
    196,
    89,
    88,
    96,
    135,
    138,
    136,
    138,
    215,
    172,
    218,
    115,
    219,
    41,
    42,
    81,
    5,
    195,
    51,
    57,
    43,
    61,
    208,
    171,
    199,
    41,
    81,
    38,
    224,
    53,
    225,
    24,
    144,
    110,
    105,
    52,
    66,
    118,
    229,
    117,
    227,
    34,
    234,
    66,
    107,
    69,
    10,
    109,
    151,
    219,
    48,
    235,
    183,
    62,
    191,
    142,
    129,
    126,
    116,
    111,
    143,
    7,
    163,
    246,
    118,
    117,
    50,
    223,
    222,
    52,
    94,
    19,
    141,
    222,
    221,
    65,
    196,
    3,
    197,
    45,
    220,
    44,
    156,
    70,
    139,
    188,
    122,
    245,
    139,
    71,
    162,
    145,
    153,
    159,
    149,
    170,
    150,
    122,
    188,
    196,
    206,
    216,
    92,
    163,
    144,
    161,
    164,
    2,
    167,
    242,
    141,
    241,
    0,
    164,
    37,
    11,
    72,
    12,
    144,
    145,
    160,
    12,
    38,
    13,
    70,
    63,
    71,
    31,
    226,
    111,
    157,
    158,
    154,
    36,
    101,
    205,
    203,
    206,
    165,
    126,
    209,
    217,
    98,
    165,
    97,
    237,
    220,
    218,
    237,
    239,
    241,
    210,
    214,
    169,
    140,
    171,
    32,
    241,
    125,
    237,
    179,
    86,
    178,
    180,
    85,
    179,
    181,
    84,
    180,
    182,
    83,
    181,
    194,
    201,
    182,
    177,
    137,
    132,
    184,
    76,
    183,
    185,
    61,
    184,
    186,
    57,
    185,
    216,
    212,
    186,
    192,
    214,
    187,
    139,
    34,
    156,
    218,
    79,
    237,
    147,
    123,
    177,
    45,
    44,
    4,
    208,
    201,
    32,
    98,
    64,
    129,
    192,
    213,
    138,
    235,
    59,
    219,
    141,
    242,
    97,
    97,
    2,
    141,
    240,
    75,
    235,
    229,
    24,
    228,
    31,
    25,
    226,
    230,
    23,
    229,
    231,
    22,
    230,
    232,
    26,
    231,
    233,
    112,
    232,
    244,
    189,
    243,
    189,
    221,
    190,
    222,
    28,
    221,
    223,
    27,
    222,
    224,
    29,
    223,
    225,
    30,
    224,
    113,
    247,
    225,
    99,
    60,
    240,
    213,
    147,
    215,
    60,
    20,
    166,
    192,
    187,
    213,
    243,
    112,
    244,
    244,
    233,
    245,
    245,
    128,
    188,
    188,
    114,
    174,
    134,
    131,
    220,
    174,
    217,
    236,
    236,
    198,
    134,
    215,
    177,
    58,
    156,
    143,
    124,
    25,
    110,
    7,
    31,
    228,
    25,
    264,
    356,
    368,
    0,
    11,
    267,
    451,
    452,
    349,
    267,
    302,
    269,
    350,
    357,
    277,
    350,
    452,
    357,
    299,
    333,
    297,
    396,
    175,
    377,
    381,
    384,
    382,
    280,
    347,
    330,
    269,
    303,
    270,
    151,
    9,
    337,
    344,
    278,
    360,
    424,
    418,
    431,
    270,
    304,
    409,
    272,
    310,
    407,
    322,
    270,
    410,
    449,
    450,
    347,
    432,
    422,
    434,
    18,
    313,
    17,
    291,
    306,
    375,
    259,
    387,
    260,
    424,
    335,
    418,
    434,
    364,
    416,
    391,
    423,
    327,
    301,
    251,
    298,
    275,
    281,
    4,
    254,
    373,
    253,
    375,
    307,
    321,
    280,
    425,
    411,
    200,
    421,
    18,
    335,
    321,
    406,
    321,
    320,
    405,
    314,
    315,
    17,
    423,
    426,
    266,
    396,
    377,
    369,
    270,
    322,
    269,
    413,
    417,
    464,
    385,
    386,
    258,
    248,
    456,
    419,
    298,
    284,
    333,
    168,
    417,
    8,
    448,
    346,
    261,
    417,
    413,
    285,
    326,
    327,
    328,
    277,
    355,
    329,
    309,
    392,
    438,
    381,
    382,
    256,
    279,
    429,
    360,
    365,
    364,
    379,
    355,
    277,
    437,
    282,
    443,
    283,
    281,
    275,
    363,
    395,
    431,
    369,
    299,
    297,
    337,
    335,
    273,
    321,
    348,
    450,
    349,
    359,
    446,
    467,
    283,
    293,
    282,
    250,
    458,
    462,
    300,
    276,
    383,
    292,
    308,
    325,
    283,
    276,
    293,
    264,
    372,
    447,
    346,
    352,
    340,
    354,
    274,
    19,
    363,
    456,
    281,
    426,
    436,
    425,
    380,
    381,
    252,
    267,
    269,
    393,
    421,
    200,
    428,
    371,
    266,
    329,
    432,
    287,
    422,
    290,
    250,
    328,
    385,
    258,
    384,
    446,
    265,
    342,
    386,
    387,
    257,
    422,
    424,
    430,
    445,
    342,
    276,
    422,
    273,
    424,
    306,
    292,
    307,
    352,
    366,
    345,
    268,
    271,
    302,
    358,
    423,
    371,
    327,
    294,
    460,
    331,
    279,
    294,
    303,
    271,
    304,
    436,
    432,
    427,
    304,
    272,
    408,
    395,
    394,
    431,
    378,
    395,
    400,
    296,
    334,
    299,
    6,
    351,
    168,
    376,
    352,
    411,
    307,
    325,
    320,
    285,
    295,
    336,
    320,
    319,
    404,
    329,
    330,
    349,
    334,
    293,
    333,
    366,
    323,
    447,
    316,
    15,
    315,
    331,
    358,
    279,
    317,
    14,
    316,
    8,
    285,
    9,
    277,
    329,
    350,
    253,
    374,
    252,
    319,
    318,
    403,
    351,
    6,
    419,
    324,
    318,
    325,
    397,
    367,
    365,
    288,
    435,
    397,
    278,
    344,
    439,
    310,
    272,
    311,
    248,
    195,
    281,
    375,
    273,
    291,
    175,
    396,
    199,
    312,
    311,
    268,
    276,
    283,
    445,
    390,
    373,
    339,
    295,
    282,
    296,
    448,
    449,
    346,
    356,
    264,
    454,
    337,
    336,
    299,
    337,
    338,
    151,
    294,
    278,
    455,
    308,
    292,
    415,
    429,
    358,
    355,
    265,
    340,
    372,
    388,
    390,
    466,
    352,
    346,
    280,
    295,
    442,
    282,
    354,
    19,
    370,
    285,
    441,
    295,
    195,
    248,
    197,
    457,
    440,
    274,
    301,
    300,
    368,
    417,
    351,
    465,
    251,
    301,
    389,
    385,
    380,
    386,
    394,
    395,
    379,
    399,
    412,
    419,
    410,
    436,
    322,
    387,
    373,
    388,
    326,
    2,
    393,
    354,
    370,
    461,
    393,
    164,
    267,
    268,
    302,
    12,
    386,
    374,
    387,
    312,
    268,
    13,
    298,
    293,
    301,
    265,
    446,
    340,
    380,
    385,
    381,
    280,
    330,
    425,
    322,
    426,
    391,
    420,
    429,
    437,
    393,
    391,
    326,
    344,
    440,
    438,
    458,
    459,
    461,
    364,
    434,
    394,
    428,
    396,
    262,
    274,
    354,
    457,
    317,
    316,
    402,
    316,
    315,
    403,
    315,
    314,
    404,
    314,
    313,
    405,
    313,
    421,
    406,
    323,
    366,
    361,
    292,
    306,
    407,
    306,
    291,
    408,
    291,
    287,
    409,
    287,
    432,
    410,
    427,
    434,
    411,
    372,
    264,
    383,
    459,
    309,
    457,
    366,
    352,
    401,
    1,
    274,
    4,
    418,
    421,
    262,
    331,
    294,
    358,
    435,
    433,
    367,
    392,
    289,
    439,
    328,
    462,
    326,
    94,
    2,
    370,
    289,
    305,
    455,
    339,
    254,
    448,
    359,
    255,
    446,
    254,
    253,
    449,
    253,
    252,
    450,
    252,
    256,
    451,
    256,
    341,
    452,
    414,
    413,
    463,
    286,
    441,
    414,
    286,
    258,
    441,
    258,
    257,
    442,
    257,
    259,
    443,
    259,
    260,
    444,
    260,
    467,
    445,
    309,
    459,
    250,
    305,
    289,
    290,
    305,
    290,
    460,
    401,
    376,
    435,
    309,
    250,
    392,
    376,
    411,
    433,
    453,
    341,
    464,
    357,
    453,
    465,
    343,
    357,
    412,
    437,
    343,
    399,
    344,
    360,
    440,
    420,
    437,
    456,
    360,
    420,
    363,
    361,
    401,
    288,
    265,
    372,
    353,
    390,
    339,
    249,
    339,
    448,
    255,
  ];

  export const IRIS_LEFT_CENTER = 468;
  export const IRIS_RIGHT_CENTER = 473;

  export const IRIS_LEFT_POINTS = [468, 469, 470, 471, 472];
  export const IRIS_RIGHT_POINTS = [473, 474, 475, 476, 477];

  const drawPath = (ctx, points, closePath) => {
    const region = new Path2D();
    region.moveTo(points[0][0], points[0][1]);
    for (let i = 1; i < points.length; i++){
        const point = points[i];
        region.lineTo(point[0], point[1]);
    }
    if (closePath) {
        region.closePath();
    }
    ctx.strokeStyle = "pink";
    ctx.stroke(region);
  };

  const v2 = (p) => [p[0], p[1]];
  const v3 = (p) => [p[0], p[1], p[2] ?? 0];
  const add2 = (a, b) => [a[0] + b[0], a[1] + b[1]];
  const sub2 = (a, b) => [a[0] - b[0], a[1] - b[1]];
  const mul2 = (a, s) => [a[0] * s, a[1] * s];
  const dot2 = (a, b) => a[0] * b[0] + a[1] * b[1];
  const len2 = (a) => Math.hypot(a[0], a[1])
  const norm2 = (a) => {
    const L = len2(a);
    return L > 1e-8 ? [a[0]/L, a[1]/L]:[0, 0];
  };
  const mid2 = (a, b) => mul2(add2(a, b), 0.5);

  export const getEyeKeyPoints = (lm) => {
    const L_OUTER = 33,  L_INNER = 133, L_UPMID = 159, L_LOMID = 145;
    const R_OUTER = 263, R_INNER = 362, R_UPMID = 386, R_LOMID = 374;

    const L = {
      inner: v2(lm[L_INNER]),
      outer: v2(lm[L_OUTER]),
      up: v2(lm[L_UPMID]),
      down: v2(lm[L_LOMID]),
    };
    const R = {
      inner: v2(lm[R_INNER]),
      outer: v2(lm[R_OUTER]),
      up: v2(lm[R_UPMID]),
      down: v2(lm[R_LOMID]),
    };
    return { L, R };
  };

  export const buildEyeLocalFrame = (eye) => {
    const p_in = eye.inner;
    const p_out = eye.outer; 
    const p_up = eye.up; 
    const p_dn = eye.down;

    // u^: horizontal axis (inner -> outer)
    const u_hat = norm2(sub2(p_out, p_in));

    // v_raw: from lower eyelid -> upper eyelid
    const v_raw = norm2(sub2(p_up, p_dn));

    // v^ orthogonal to u^ (Gram-Schmidt 2D)
    const proj = mul2(u_hat, dot2(v_raw, u_hat)); 
    const v_hat = norm2(sub2(v_raw, proj));

    // Center c
    const c = mid2(p_in, p_out);

    const eyeWidth = len2(sub2(p_out, p_in)); 
    const eyeHeight = len2(sub2(p_up, p_dn));

    return { u_hat, v_hat, c, eyeWidth, eyeHeight, p_in, p_out, p_up, p_dn };
  };

  export const getEyeLocalFrames = (landmarks) => {
    const { L, R } = getEyeKeyPoints(landmarks);
    return { 
      left: buildEyeLocalFrame(L), 
      right: buildEyeLocalFrame(R), 
    };
  };

  /**
   * Get iris centers from MediaPipe landmarks
   * @param {Array} landmarks - Full landmark array (should have 478 points with iris data)
   * @return {{left: Array, right: Array}|null} - Iris center coordinates or null
   */
  export const getIrisCenters = (landmarks) => {
    if (!landmarks || landmarks.length < 478) {
      console.warn("Iris landmarks not available. Need 478 landmarks but got:", landmarks?.length);
      return null;
    }

    return {
      left: v3(landmarks[IRIS_LEFT_CENTER]),
      right: v3(landmarks[IRIS_RIGHT_CENTER])
    };
  };

  export const irisToLocal = (eyeFrame, irisC) => {
    if (!eyeFrame || !irisC) return null;
    const { c, u_hat, v_hat, eyeWidth, eyeHeight } = eyeFrame;
    const rel = sub2(irisC, c);

    const x = dot2(rel, u_hat) / (0.5 * eyeWidth);
    const y = dot2(rel, v_hat) / (0.5 * eyeHeight);

    return { x, y };
  };

  export const getNormalizedIris = (landmarks) => {
    const frames = getEyeLocalFrames(landmarks);
    const centers = getIrisCenters(landmarks);
    if (!frames || !centers) return null;

    return {
      left: irisToLocal(frames.left, centers.left),
      right: irisToLocal(frames.right, centers.right),
    };
  };

  export const makeEMA2 = (alpha = 0.6) => {
    let s = null;
    return (v) => {
      if (!v) return s;
      if (!s) { 
        s = { x: v.x, y: v.y };
      }
      else {
        s.x = alpha * v.x + (1 - alpha) * s.x;
        s.y = alpha * v.y + (1 - alpha) * s.y;
      }
      return { ...s };
    };
  };

  export const drawEyeFrame = (ctx, frame, color="yellow", scale=40) => {
    const { u_hat, v_hat, c } = frame; 
    const endU = add2(c, mul2(u_hat, scale)); 
    const endV = add2(c, mul2(v_hat, scale));

    // u^ axis 
    ctx.beginPath(); 
    ctx.moveTo(c[0], c[1]); 
    ctx.lineTo(endU[0], endU[1]); 
    ctx.strokeStyle = color; 
    ctx.lineWidth = 2; 
    ctx.stroke();

    // v^ axis
    ctx.beginPath(); 
    ctx.moveTo(c[0], c[1]); 
    ctx.lineTo(endV[0], endV[1]); 
    ctx.strokeStyle = "#00ffff"; 
    ctx.lineWidth = 2; 
    ctx.stroke();

    // Center c
    ctx.beginPath(); 
    ctx.arc(c[0], c[1], 2.5, 0, Math.PI*2); 
    ctx.fillStyle = color; 
    ctx.fill();
  };

  export function drawArrow2D(ctx, x0, y0, x1, y1, color="#ff0") {
    ctx.beginPath();
    ctx.moveTo(x0, y0);
    ctx.lineTo(x1, y1);
    ctx.strokeStyle = color;
    ctx.lineWidth = 3;
    ctx.stroke();

    const dx = x1 - x0;
    const dy = y1 - y0;
    const len = Math.hypot(dx, dy) || 1;
    const ux = dx / len;
    const uy = dy / len;
    const headLen = Math.min(14, len * 0.25);
    const ang = Math.PI / 7;

    const rx = ux * Math.cos(ang) - uy * Math.sin(ang);
    const ry = ux * Math.sin(ang) + uy * Math.cos(ang);
    const lx = ux * Math.cos(-ang) - uy * Math.sin(-ang);
    const ly = ux * Math.sin(-ang) + uy * Math.cos(-ang);

    ctx.beginPath();
    ctx.moveTo(x1, y1);
    ctx.lineTo(x1 - rx * headLen, y1 - ry * headLen);
    ctx.moveTo(x1, y1);
    ctx.lineTo(x1 - lx * headLen, y1 - ly * headLen);
    ctx.strokeStyle = color;
    ctx.lineWidth = 3;
    ctx.stroke();
  }

  export const drawMesh = (predictions, ctx) => {
    if (!predictions || !predictions.length) return;

    predictions.forEach((prediction) => {
      const ptsRaw =  prediction.keypoints || prediction.scaledMesh;
      if (!ptsRaw) return;

      const keypoints = Array.isArray(ptsRaw) && typeof ptsRaw[0]?.[0] === "number"
        ? ptsRaw
        : ptsRaw.map(kp => [kp.x, kp.y, kp.z]);

      for (let i = 0; i < TRIANGULATION.length / 3; i++) {
        const a = TRIANGULATION[i * 3];
        const b = TRIANGULATION[i * 3 + 1];
        const c = TRIANGULATION[i * 3 + 2];
        const pA = keypoints[a];
        const pB = keypoints[b];
        const pC = keypoints[c];
        if (!pA || !pB || !pC) continue;
        drawPath(ctx, [pA, pB, pC], true);
      }

      for (let i = 0; i < keypoints.length; i++) {
        const [x, y] = keypoints[i];
        if (x == null || y == null) continue;
        ctx.beginPath();
        ctx.arc(x, y, 1, 0, 3 * Math.PI);
        ctx.fillStyle = "aqua";
        ctx.fill();
      }
    });
  };

  export const displayPoseInfo = (ctx, poseData) => {
    const { angles } = poseData;

    if (
        !displayPoseInfo.prevAngles ||
        Math.abs(angles.yaw - displayPoseInfo.prevAngles.yaw) > 0.5 ||
        Math.abs(angles.pitch - displayPoseInfo.prevAngles.pitch) > 0.5 ||
        Math.abs(angles.roll - displayPoseInfo.prevAngles.roll) > 0.5
    ) {
        ctx.fillStyle = "rgba(0, 0, 0, 0.7)";
        ctx.fillRect(10, 10, 300, 120);

        ctx.fillStyle = "white";
        ctx.font = "16px Arial";
        ctx.fillText(`Yaw: ${angles.yaw.toFixed(2)}`, 20, 30);
        ctx.fillText(`Pitch: ${angles.pitch.toFixed(2)}`, 20, 50);
        ctx.fillText(`Roll: ${angles.roll.toFixed(2)}`, 20, 70);

        const hasMovement = Object.keys(poseData.matrices).length > 0;
        const hasCombinedMatrix = poseData.matrices.R !== undefined;        ctx.fillStyle = hasMovement ? "#ff6b6b" : "#4ecdc4";
        ctx.fillText(`Status: ${hasMovement ? 'Head moved' : 'Head straight'}`, 20, 90);
        if (hasCombinedMatrix) {
          ctx.fillText(`Combined Matrix: Available`, 20, 110);
        }

        displayPoseInfo.prevAngles = { ...angles };
    }
  };

  export const RIGID_IDXS = [33, 263, 6, 1, 61, 291]; // L_OUTER, R_OUTER, NOSE_BRIDGE, NOSE_TIP, L_MOUTH, R_MOUTH

  export function pickPoint3D(landmarks, idxs = RIGID_IDXS) {
    return idxs.map(i => {
      const p = landmarks[i];
      return [p[0], p[1], p[2]];
    });
  }

  function centroid3D(P) {
    const n = P.length;
    let cx = 0, cy = 0, cz = 0;
    for (const [x, y, z] of P) {
      cx += x;
      cy += y;
      cz += z;
    }
    return [cx/n, cy/n, cz/n];
  }

  function subC3D(P, c) {
    const [cx, cy, cz] = c;
    return P.map(([x, y, z]) => [x - cx, y - cy, z - cz])
  }

  function add3(a, b) {
    return [a[0] + b[0], a[1] + b[1], a[2] + b[2]];
  }

  function matVec3(M, v) {
    return [
      M[0][0] * v[0] + M[0][1] * v[1] + M[0][2] * v[2],
      M[1][0] * v[0] + M[1][1] * v[1] + M[1][2] * v[2],
      M[2][0] * v[0] + M[2][1] * v[1] + M[2][2] * v[2],
    ];
  }

  function buildK(P, Q) {
    let Sxx = 0, Sxy = 0, Sxz = 0, Syx = 0, Syy = 0, Syz = 0, Szx = 0, Szy = 0, Szz = 0;
    for (let i = 0; i < P.length; i++) {
      const [px, py, pz] = P[i], [qx, qy, qz] = Q[i];
      Sxx += px * qx; Sxy += px * qy; Sxz += px * qz;
      Syx += py * qx; Syy += py * qy; Syz += py * qz;
      Szx += pz * qx; Szy += pz * qy; Szz += pz * qz;
    }
    const trace = Sxx + Syy + Szz;
    const K = [
      [ trace, Syz - Szy,  Szx - Sxz,  Sxy - Syx ],
      [ Syz - Szy, Sxx - Syy - Szz, Sxy + Syx, Szx + Sxz ],
      [ Szx - Sxz, Sxy + Syx, -Sxx + Syy - Szz, Syz + Szy ],
      [ Sxy - Syx, Szx + Sxz, Syz + Szy, -Sxx - Syy + Szz ]
    ];
    return K;
  }

  function dominantEigenvector4(K, iters=30) {
    let v = [1, 0, 0, 0];
    for (let t = 0; t < iters; t++) {
      const w = [
        K[0][0] * v[0] + K[0][1] * v[1] + K[0][2] * v[2] + K[0][3] * v[3],
        K[1][0] * v[0] + K[1][1] * v[1] + K[1][2] * v[2] + K[1][3] * v[3],
        K[2][0] * v[0] + K[2][1] * v[1] + K[2][2] * v[2] + K[2][3] * v[3],
        K[3][0] * v[0] + K[3][1] * v[1] + K[3][2] * v[2] + K[3][3] * v[3],
      ];
      const n = Math.hypot(w[0], w[1], w[2], w[3]) || 1;
      v = [w[0]/n, w[1]/n, w[2]/n, w[3]/n];
    }
    return v;
  }

  function quatToR(q) {
    const [w, x, y, z] = q;
    const xx = x * x, yy = y * y, zz = z * z;
    const xy = x * y, xz = x * z, yz = y * z;
    const wx = w * x, wy = w * y, wz = w * z;
    return [
      [1 - 2 * (yy + zz), 2 * (xy - wz), 2 * (xz + wy)],
      [2 * (xy + wz), 1 - 2 * (xx + zz), 2 * (yz - wx)],
      [2 * (xz - wy), 2 * (yz + wx), 1 - 2 * (xx + yy)],
    ];
  }

  export function estimateRtHorn(refPts, obsPts) {
    if (!refPts || !obsPts || refPts.length !== obsPts.length || refPts.length < 3) {
      return null;
    }

    const cRef = centroid3D(refPts);
    const cObs = centroid3D(obsPts);
    const Pref = subC3D(refPts, cRef);
    const Qobs = subC3D(obsPts, cObs);
    const K = buildK(Pref, Qobs);
    const q = dominantEigenvector4(K);
    const R = quatToR(q);
    const RcRef = matVec3(R, cRef);
    const t = [ cObs[0] - RcRef[0], cObs[1] - RcRef[1], cObs[2] - RcRef[2] ];

    return {
      R_now: R, t_now: t
    };
  }

  export function eulerFromR(R) {
    const r00 = R[0][0], r01 = R[0][1], r02 = R[0][2];
    const r10 = R[1][0], r11 = R[1][1], r12 = R[1][2];
    const r20 = R[2][0], r21 = R[2][1], r22 = R[2][2]; 

    const pitch = Math.atan2(r21, r22);
    const yaw = Math.asin(Math.max(-1, Math.min(1, -r20)));
    const roll = Math.atan2(r10, r00);

    const toDeg = (x) => x * 180 / Math.PI;
    return {
      yaw: toDeg(yaw),
      pitch: toDeg(pitch),
      roll: toDeg(roll)
    }
  }

  export function eyeAnglesToHeadVec(yawDeg, pitchDeg) {
    const toRad = (d) => d * Math.PI / 180;
    const y = toRad(yawDeg);
    const p = toRad(pitchDeg);
    const sy = Math.sin(y);
    const cy = Math.cos(y);
    const sp = Math.sin(p);
    const cp = Math.cos(p);
    return [cp * sy, sp, cp * cy];
  }

  function norm3(v) {
    const n = Math.hypot(v[0], v[1], v[2]) || 1;
    return [v[0] / n, v[1] / n, v[2] / n];
  }

  export function headToCamVec(R_now, g_head, doNormalize=true) {
    const v = matVec3(R_now, g_head);
    return doNormalize ? norm3(v) : v;
  }

  export function combineCyclopean(gL_cam, gR_cam, wL = 0.5, wR = 0.5) {
    const x = wL * gL_cam[0] + wR * gR_cam[0];
    const y = wL * gL_cam[1] + wR * gR_cam[1];
    const z = wL * gL_cam[2] + wR * gR_cam[2];
    const n = Math.hypot(x, y, z) || 1;
    return [x / n, y / n, z / n];
  }

  export function vecToYawPitchDeg(v_cam) {
    const yaw = Math.atan2(v_cam[0], v_cam[2]);
    const pitch = Math.asin(Math.max(-1, Math.min(1, v_cam[1])));
    const toDeg = (r) => r * 180 / Math.PI;
    return {
      yaw: toDeg(yaw),
      pitch: toDeg(pitch)
    };
  }

  // Start rectify part
  function sampleBilinear(srcData, w, h, x, y) {
    const x0 = Math.floor(x), y0 = Math.floor(y);
    const x1 = x0 + 1, y1 = y0 + 1;
    const dx = x - x0, dy = y - y0;

    function px(ix, iy) {
      const cx = Math.max(0, Math.min(w - 1, ix));
      const cy = Math.max(0, Math.min(h - 1, iy));
      const idx = (cy * w + cx) * 4;
      return [
        srcData[idx], srcData[idx + 1], srcData[idx + 2], srcData[idx + 3]
      ];
    }

    const c00 = px(x0, y0), c10 = px(x1, y0),
          c01 = px(x0, y1), c11 = px(x1, y1);

    const r = (1 - dx) * (1 - dy) * c00[0] + dx * (1 - dy) * c10[0] + (1 - dx) * dy * c01[0] + dx * dy * c11[0];
    const g = (1 - dx) * (1 - dy) * c00[1] + dx * (1 - dy) * c10[1] + (1 - dx) * dy * c01[1] + dx * dy * c11[1];
    const b = (1 - dx) * (1 - dy) * c00[2] + dx * (1 - dy) * c10[2] + (1 - dx) * dy * c01[2] + dx * dy * c11[2];
    const a = (1 - dx) * (1 - dy) * c00[3] + dx * (1 - dy) * c10[3] + (1 - dx) * dy * c01[3] + dx * dy * c11[3];
    return [r|0, g|0, b|0, a|0];
  }

  export function warpEyePatch(srcImg, eyeFrame, outW=128, outH=96, kx=1.4, ky=1.6) {
    const { data: S, width: SW, height: SH } = srcImg;
    const { c, u_hat, v_hat, eyeWidth, eyeHeight } = eyeFrame;

    const W = outW, H = outH;
    const out = new ImageData(W, H);

    const sx = kx * eyeWidth;
    const sy = ky * eyeHeight;

    for (let j = 0; j < H; j++) {
      const ny = (j / (H - 1) - 0.5) * sy;
      for (let i = 0; i < W; i++) {
        const nx = (i / (W - 1) - 0.5) * sx;
        const px = c[0] + u_hat[0] * nx + v_hat[0] * ny;
        const py = c[1] + u_hat[1] * nx + v_hat[1] * ny;

        const [r, g, b, a] = sampleBilinear(S, SW, SH, px, py);
        const di = (j * W + i) * 4;
        out.data[di] = r;
        out.data[di + 1] = g;
        out.data[di + 2] = b;
        out.data[di + 3] = 255;
      }
    }
    return out;
  }
  // end rectify part

  export function buildFeatures(dx, dy, order=1) {
    return (order === 1)
      ? [dx, dy, 1]
      : [dx, dy, dx * dx, dx * dy, dy * dy, 1];
  }

  function transpose(A) {
    return A[0].map((_, j) => A.map(row => row[j]));
  }
  function matMul(A, B) {
    const m = A.length, n = B[0].length, p = B.length;
    const C = Array.from({length:m}, () => Array(n).fill(0));
    for (let i = 0; i < m; i++) for (let k = 0; k < p; k++) { 
      const aik = A[i][k];
      for (let j = 0; j < n; j++) C[i][j] += aik * B[k][j];
    }
    return C;
  }
  function matVec(A, x) {
    const m = A.length, n = A[0].length;
    const y = new Array(m).fill(0);
    for (let i = 0; i < m; i++) for (let j = 0; j < n; j++) y[i] += A[i][j] * x[j];
    return y;
  }
  function gaussianSolve(A, b) {
    const n = A.length;
    const M = A.map(r => r.slice());
    const x = b.slice();
    for (let i = 0; i < n; i++) {
      let piv = i;
      for (let r = i + 1; r < n; r++) if(Math.abs(M[r][i]) > Math.abs(M[piv][i])) piv = r;
      [M[i], M[piv]] = [M[piv], M[i]];
      [x[i], x[piv]] = [x[piv], x[i]];
      const s = M[i][i] || 1e-12;
      for (let j = i; j < n; j++) M[i][j] /= s; x[i] /= s;
      for (let r = 0; r < n; r++) if(r !== i) {
        const f = M[r][i];
        if (!f) continue;
        for (let j = i; j < n; j++) M[r][j] -= f * M[i][j]; x[r] -= f * x[i];
      }
    }
    return x;
  }

  export function fitYawPitchModel(samples, order=1) {
    const X = samples.map(s => buildFeatures(s.dx, s.dy, order));
    const XT = transpose(X);
    const XTX = matMul(XT, X);
    const yYaw = samples.map(s => s.yaw);
    const yPitch = samples.map(s => s.pitch);
    const XTyYaw = matVec(XT, yYaw);
    const XTyPitch = matVec(XT, yPitch);
    const betaYaw = gaussianSolve(XTX, XTyYaw);
    const betaPitch = gaussianSolve(XTX, XTyPitch);
    return { 
      order, 
      betaYaw, 
      betaPitch
    };
  }

  export function evalYawPitch(dx, dy, model) {
    const f = buildFeatures(dx, dy, model.order);
    const dot =  (w) => w.reduce((acc, wi, i) => acc + wi * f[i], 0);
    return {
      yaw: dot(model.betaYaw),
      pitch: dot(model.betaPitch)
    };
  }

  function cross3(a, b) {
    return [a[1] * b[2] - a[2] * b[1], a[2] * b[0] - a[0] * b[2], a[0] * b[1] - a[1] * b[0]];
  }
  function dot3(a, b) {
    return a[0] * b[0] + a[1] * b[1] + a[2] * b[2];
  }
  function sub3(a, b) {
    return [a[0] - b[0], a[1] - b[1], a[2] - b[2]];
  }
  function add3s(a, s, b) {
    return [a[0] + s * b[0], a[1] + s * b[1], a[2] + s * b[2]];
  }

  export function solveScreenPlaneLS(samples, cx, cy, ridge=1e-8) {
    const N = samples.length;
    const M = 9 + N;
    const R = 3 * N;
    const A = Array.from({ length: R }, () => Array(M).fill(0));
    const b = Array(R).fill(0);
    
    for (let i = 0; i < N; i++) {
      const { x, y, o, g } = samples[i];
      const X = x - cx;
      const Y = y - cy;

      for (let k = 0; k < 3; k++) {
        const r = 3 * i + k;
        A[r][k] = 1;    
        A[r][3 + k] = X;
        A[r][6 + k] = Y;
        A[r][9 + i] = -g[k];
        b[r] = o[k];
      } 
    }

    const AT = transpose(A);
    const ATA = matMul(AT, A);
    for (let d = 0; d < M; d++) ATA[d][d] += ridge;
    const ATb = matVec(AT, b);
    const s = gaussianSolve(ATA, ATb);

    const O = [s[0], s[1], s[2]];
    const U = [s[3], s[4], s[5]];
    const V = [s[6], s[7], s[8]];
    const t = s.slice(9);

    let rss = 0;
    for (let i = 0; i < N; i++) {
      const { x, y, o, g } = samples[i];
      const X = x - cx;
      const Y = y - cy;
      const p_plane = [ O[0] + U[0] * X + V[0] * Y,
                        O[1] + U[1] * X + V[1] * Y,
                        O[2] + U[2] * X + V[2] * Y ];
      const p_ray = add3s(O, t[i], g);
      const r = sub3(p_ray, p_plane);
      rss += dot3(r, r);
    }
    return { O, U, V, t, cx, cy, rss };
  }

  export function intersectRayToScreenXY(o, g, plane) {
    const { O, U, V, cx, cy } = plane;
    const n = cross3(U, V);
    const denom = dot3(g, n);

    if (Math.abs(denom) < 1e-8) return null;

    const t = dot3(sub3(O, o), n) / denom;
    const p = add3s(o, t, g);
    const M = [[U[0], V[0]], [U[1], V[1]], [U[2], V[2]]];
    const MT = transpose(M);
    const MTM = matMul(MT, M);
    const rhs = sub3(p, O);
    const MTb = matVec(MT, rhs);
    const [x0, y0] = gaussianSolve(MTM, MTb);

    return { x: x0 + cx, y: y0 + cy, p3: p, t };
  }

  export function buildGazeFeatureVec(zL, zR, headAngles, order=2) {
    const yawN = (headAngles?.yaw || 0) / 30;
    const pitchN = (headAngles?.pitch || 0) / 30;
    const base = [zL.x, zL.y, zR.x, zR.y, yawN, pitchN];
    let feats = [...base, 1];

    if (order >= 2) {
      for (let i = 0; i < base.length; i++) feats.push(base[i] * base[i]);
      for (let i = 0; i < base.length; i++)
        for (let j = i + 1; j < base.length; j++) 
          feats.push(base[i] * base[j]);
    }
    return feats;
  }

  function fitLinearRidge(X, y, ridge=1e-5) {
    const XT = transpose(X);
    const XTX = matMul(XT, X);
    for (let d = 0; d < XTX.length; d++) XTX[d][d] += ridge;
    const XTy = matVec(XT, y);
    const w = gaussianSolve(XTX, XTy);
    return w;
  }

  function dotVec(w, f) {
    let s = 0;
    for (let i = 0; i < w.length; i++) s += w[i] * (f[i] || 0);
    return s;
  }

  export function fitScreenXYModel(samples, order=2, ridge=1e-5) {
    const X = samples.map(s => buildGazeFeatureVec(s.zL, s.zR, s.head, order));
    const yU = samples.map(s => s.u);
    const yV = samples.map(s => s.v);
    const wU = fitLinearRidge(X, yU, ridge);
    const wV = fitLinearRidge(X, yV, ridge);
    return { order, wU, wV };
  }

  export function evalScreenXYModel(zL, zR, headAngles, model) {
    const f = buildGazeFeatureVec(zL, zR, headAngles, model.order);
    const u = dotVec(model.wU, f);
    const v = dotVec(model.wV, f);
    return { 
      u: Math.max(0, Math.min(1, u)),
      v: Math.max(0, Math.min(1, v)),
    };
  }
